// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("DB_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  hasCompletedSignUp Boolean @default(false)
  hasAcceptedInvite Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role? @relation(fields: [roleId], references: [id])
  roleId        String? @default("clj93h7pu0000tj2ca7m85nov")
  experiments   Experiment[]
  spaces    Space[] @relation("UserSpace")
  currentSpace Space? @relation("CurrentUserSpace", fields: [currentSpaceId], references: [id])
  currentSpaceId String?

}

enum ViewMode {
  PROMODE
  QUICKVIEW
}
model Space {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String   @unique
  users       User[] @relation("UserSpace")
  currentSpaceUsers User[] @relation("CurrentUserSpace")
  experiments Experiment[]
  iconUrl     String?
  viewMode ViewMode @default(PROMODE)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id           String    @id @default(cuid())
  content      String
  createdAt    DateTime @default(now())
  votes Vote[]
}

model Vote { 
  createdAt    DateTime @default(now())
  feedback     Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId   String
  voteType     VoteType
  anonymousId  String @default(cuid())
  @@id([feedbackId, anonymousId])
}

model Role {
  id           String    @id @default(cuid())
  value        String    
  label        String   
  user         User[]
}

enum VoteType {
  UP
  DOWN
}

model Invite {
  id       String    @id @default(cuid())
  email    String    @unique
  createdAt DateTime @default(now())
}

model Decision {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String   @unique
  experiments Experiment[]
}

model Experiment {
  id          String   @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime 
  name        String   @unique
  identifier  String   @unique
  hypothesis  String?
  decision     Decision? @relation(fields: [decisionId], references: [id])
  decisionId   String?

  country      Country? @relation(fields: [countryId], references: [id])
  countryId    String?
  startDate    DateTime?
  endDate      DateTime?    
  cover       String?  
  dri         User? @relation(fields: [driId], references: [id]) 
  driId       String?
  variants    Json?
  pages       Page[]
  space   Space? @relation(fields: [spaceId], references: [id])
  spaceId String?
  isEnabled Boolean @default(false)
  deployUrl String?
  dashboardUrl String?
  evaluationUrl String?
  designUrl String?
  primaryMetric String?
  improvement Decimal?
  statSig Decimal?
  
}

model Country {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String   @unique
  experiments Experiment[]
}



model Page {
  id String @id @default(cuid())
  slug  String @unique
  label String @unique
  experiments Experiment[]
}
